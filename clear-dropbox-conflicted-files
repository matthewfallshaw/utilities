#!/usr/bin/env ruby

if File.directory?("/Volumes/Internal/Dropbox*")
  DROPBOX = "/Volumes/Internal/Dropbox*"
elsif File.directory?(File.expand_path("~/Dropbox*"))
  DROPBOX = File.expand_path("~/Dropbox*")
else
  raise "Can't find your Dropbox folder, sorry."
end

%w[rubygems optparse ostruct].each {|l| require l }

options = OpenStruct.new
opts = OptionParser.new do |o|
  o.on('-e', '--exclude REGEXP',
       "exclude files matching REGEXP") do |pattern|
    begin
      options.exclude = Regexp.new(pattern)
    rescue RegexpError
      STDERR.puts "#{$0}: can't make a Regular Expression from '#{pattern}' - aborting"
      exit 1
    end
  end
  o.on('-q', '--quiet', "be quiet") do
    options.quiet = true
  end
  o.on('-h', "this help text") { puts o; exit }
  o.parse!
end


puts "find #{DROPBOX} -name '.dropbox.cache' -prune -or -name '*s conflicted copy*' -print"
conflicts = `find #{DROPBOX} -name ".dropbox.cache" -prune -or -name '*s conflicted copy*' -print`.split("\n")
log = {:removed => [], :ignored => []}
conflicts.each do |f|
  begin
    if options.exclude && options.exclude.match(f) then
      log[:ignored] << f
    elsif File.delete(f)
      log[:removed] << f
    end
  rescue => e
    STDERR.puts "Successfully removed conflicted copies:\n", log[:removed].join(", ") unless log[:removed].empty?
    STDERR.puts "Couldn't remove file: #{f}"
    STDERR.puts e
    exit 1
  end
end

# Report
exit if options.quiet
if log[:removed].empty? && log[:ignored].empty?
  puts "No conflicted copies found"
else
  puts (["Ignored conflicted copies:"] + log[:ignored]).join("\n  ") unless log[:ignored].empty?
  puts (["Removed conflicted copies:"] + log[:removed]).join("\n  ") unless log[:removed].empty?
end
